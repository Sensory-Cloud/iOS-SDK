//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: v1/video/video.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Handles the retrieval and management of video models
///
/// Usage: instantiate `Sensory_Api_V1_Video_VideoModelsClient`, then call methods of this protocol to make API calls.
public protocol Sensory_Api_V1_Video_VideoModelsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sensory_Api_V1_Video_VideoModelsClientInterceptorFactoryProtocol? { get }

  func getModels(
    _ request: Sensory_Api_V1_Video_GetModelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Video_GetModelsRequest, Sensory_Api_V1_Video_GetModelsResponse>
}

extension Sensory_Api_V1_Video_VideoModelsClientProtocol {
  public var serviceName: String {
    return "sensory.api.v1.video.VideoModels"
  }

  /// Get available models for enrollment and authentication
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to GetModels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getModels(
    _ request: Sensory_Api_V1_Video_GetModelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Video_GetModelsRequest, Sensory_Api_V1_Video_GetModelsResponse> {
    return self.makeUnaryCall(
      path: "/sensory.api.v1.video.VideoModels/GetModels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModelsInterceptors() ?? []
    )
  }
}

public protocol Sensory_Api_V1_Video_VideoModelsClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getModels'.
  func makeGetModelsInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Video_GetModelsRequest, Sensory_Api_V1_Video_GetModelsResponse>]
}

public final class Sensory_Api_V1_Video_VideoModelsClient: Sensory_Api_V1_Video_VideoModelsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Video_VideoModelsClientInterceptorFactoryProtocol?

  /// Creates a client for the sensory.api.v1.video.VideoModels service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Video_VideoModelsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public final class Sensory_Api_V1_Video_VideoModelsTestClient: Sensory_Api_V1_Video_VideoModelsClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Video_VideoModelsClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Video_VideoModelsClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the GetModels RPC. This must be called
  /// before calling 'getModels'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGetModelsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Video_GetModelsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Video_GetModelsRequest, Sensory_Api_V1_Video_GetModelsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sensory.api.v1.video.VideoModels/GetModels", requestHandler: requestHandler)
  }

  public func enqueueGetModelsResponse(
    _ response: Sensory_Api_V1_Video_GetModelsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Video_GetModelsRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetModelsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetModels'
  public var hasGetModelsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sensory.api.v1.video.VideoModels/GetModels")
  }
}

/// Handles all video-related biometrics
///
/// Usage: instantiate `Sensory_Api_V1_Video_VideoBiometricsClient`, then call methods of this protocol to make API calls.
public protocol Sensory_Api_V1_Video_VideoBiometricsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sensory_Api_V1_Video_VideoBiometricsClientInterceptorFactoryProtocol? { get }

  func createEnrollment(
    callOptions: CallOptions?,
    handler: @escaping (Sensory_Api_V1_Video_CreateEnrollmentResponse) -> Void
  ) -> BidirectionalStreamingCall<Sensory_Api_V1_Video_CreateEnrollmentRequest, Sensory_Api_V1_Video_CreateEnrollmentResponse>

  func authenticate(
    callOptions: CallOptions?,
    handler: @escaping (Sensory_Api_V1_Video_AuthenticateResponse) -> Void
  ) -> BidirectionalStreamingCall<Sensory_Api_V1_Video_AuthenticateRequest, Sensory_Api_V1_Video_AuthenticateResponse>
}

extension Sensory_Api_V1_Video_VideoBiometricsClientProtocol {
  public var serviceName: String {
    return "sensory.api.v1.video.VideoBiometrics"
  }

  /// Enrolls a user with a stream of video. Streams a CreateEnrollmentResponse
  /// as the video is processed.
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func createEnrollment(
    callOptions: CallOptions? = nil,
    handler: @escaping (Sensory_Api_V1_Video_CreateEnrollmentResponse) -> Void
  ) -> BidirectionalStreamingCall<Sensory_Api_V1_Video_CreateEnrollmentRequest, Sensory_Api_V1_Video_CreateEnrollmentResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/sensory.api.v1.video.VideoBiometrics/CreateEnrollment",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEnrollmentInterceptors() ?? [],
      handler: handler
    )
  }

  /// Authenticates a user with a stream of video against an existing enrollment.
  /// Streams an AuthenticateResponse as the video is processed.
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func authenticate(
    callOptions: CallOptions? = nil,
    handler: @escaping (Sensory_Api_V1_Video_AuthenticateResponse) -> Void
  ) -> BidirectionalStreamingCall<Sensory_Api_V1_Video_AuthenticateRequest, Sensory_Api_V1_Video_AuthenticateResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/sensory.api.v1.video.VideoBiometrics/Authenticate",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Sensory_Api_V1_Video_VideoBiometricsClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createEnrollment'.
  func makeCreateEnrollmentInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Video_CreateEnrollmentRequest, Sensory_Api_V1_Video_CreateEnrollmentResponse>]

  /// - Returns: Interceptors to use when invoking 'authenticate'.
  func makeAuthenticateInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Video_AuthenticateRequest, Sensory_Api_V1_Video_AuthenticateResponse>]
}

public final class Sensory_Api_V1_Video_VideoBiometricsClient: Sensory_Api_V1_Video_VideoBiometricsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Video_VideoBiometricsClientInterceptorFactoryProtocol?

  /// Creates a client for the sensory.api.v1.video.VideoBiometrics service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Video_VideoBiometricsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public final class Sensory_Api_V1_Video_VideoBiometricsTestClient: Sensory_Api_V1_Video_VideoBiometricsClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Video_VideoBiometricsClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Video_VideoBiometricsClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a streaming response for the CreateEnrollment RPC. This must be called
  /// before calling 'createEnrollment'. See also 'FakeStreamingResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCreateEnrollmentResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Video_CreateEnrollmentRequest>) -> () = { _ in }
  ) -> FakeStreamingResponse<Sensory_Api_V1_Video_CreateEnrollmentRequest, Sensory_Api_V1_Video_CreateEnrollmentResponse> {
    return self.fakeChannel.makeFakeStreamingResponse(path: "/sensory.api.v1.video.VideoBiometrics/CreateEnrollment", requestHandler: requestHandler)
  }

  public func enqueueCreateEnrollmentResponses(
    _ responses: [Sensory_Api_V1_Video_CreateEnrollmentResponse],
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Video_CreateEnrollmentRequest>) -> () = { _ in }
  )  {
    let stream = self.makeCreateEnrollmentResponseStream(requestHandler)
    // These are the only operation on the stream; try! is fine.
    responses.forEach { try! stream.sendMessage($0) }
    try! stream.sendEnd()
  }

  /// Returns true if there are response streams enqueued for 'CreateEnrollment'
  public var hasCreateEnrollmentResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sensory.api.v1.video.VideoBiometrics/CreateEnrollment")
  }

  /// Make a streaming response for the Authenticate RPC. This must be called
  /// before calling 'authenticate'. See also 'FakeStreamingResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAuthenticateResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Video_AuthenticateRequest>) -> () = { _ in }
  ) -> FakeStreamingResponse<Sensory_Api_V1_Video_AuthenticateRequest, Sensory_Api_V1_Video_AuthenticateResponse> {
    return self.fakeChannel.makeFakeStreamingResponse(path: "/sensory.api.v1.video.VideoBiometrics/Authenticate", requestHandler: requestHandler)
  }

  public func enqueueAuthenticateResponses(
    _ responses: [Sensory_Api_V1_Video_AuthenticateResponse],
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Video_AuthenticateRequest>) -> () = { _ in }
  )  {
    let stream = self.makeAuthenticateResponseStream(requestHandler)
    // These are the only operation on the stream; try! is fine.
    responses.forEach { try! stream.sendMessage($0) }
    try! stream.sendEnd()
  }

  /// Returns true if there are response streams enqueued for 'Authenticate'
  public var hasAuthenticateResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sensory.api.v1.video.VideoBiometrics/Authenticate")
  }
}

/// Handles all video recognition endpoints
///
/// Usage: instantiate `Sensory_Api_V1_Video_VideoRecognitionClient`, then call methods of this protocol to make API calls.
public protocol Sensory_Api_V1_Video_VideoRecognitionClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sensory_Api_V1_Video_VideoRecognitionClientInterceptorFactoryProtocol? { get }

  func validateLiveness(
    callOptions: CallOptions?,
    handler: @escaping (Sensory_Api_V1_Video_LivenessRecognitionResponse) -> Void
  ) -> BidirectionalStreamingCall<Sensory_Api_V1_Video_ValidateRecognitionRequest, Sensory_Api_V1_Video_LivenessRecognitionResponse>
}

extension Sensory_Api_V1_Video_VideoRecognitionClientProtocol {
  public var serviceName: String {
    return "sensory.api.v1.video.VideoRecognition"
  }

  /// Validates the liveness of a single image or stream of images.
  /// Streams a ValidateRecognitionResponse as the images are processed.
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func validateLiveness(
    callOptions: CallOptions? = nil,
    handler: @escaping (Sensory_Api_V1_Video_LivenessRecognitionResponse) -> Void
  ) -> BidirectionalStreamingCall<Sensory_Api_V1_Video_ValidateRecognitionRequest, Sensory_Api_V1_Video_LivenessRecognitionResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/sensory.api.v1.video.VideoRecognition/ValidateLiveness",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateLivenessInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Sensory_Api_V1_Video_VideoRecognitionClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'validateLiveness'.
  func makeValidateLivenessInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Video_ValidateRecognitionRequest, Sensory_Api_V1_Video_LivenessRecognitionResponse>]
}

public final class Sensory_Api_V1_Video_VideoRecognitionClient: Sensory_Api_V1_Video_VideoRecognitionClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Video_VideoRecognitionClientInterceptorFactoryProtocol?

  /// Creates a client for the sensory.api.v1.video.VideoRecognition service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Video_VideoRecognitionClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public final class Sensory_Api_V1_Video_VideoRecognitionTestClient: Sensory_Api_V1_Video_VideoRecognitionClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Video_VideoRecognitionClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Video_VideoRecognitionClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a streaming response for the ValidateLiveness RPC. This must be called
  /// before calling 'validateLiveness'. See also 'FakeStreamingResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeValidateLivenessResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Video_ValidateRecognitionRequest>) -> () = { _ in }
  ) -> FakeStreamingResponse<Sensory_Api_V1_Video_ValidateRecognitionRequest, Sensory_Api_V1_Video_LivenessRecognitionResponse> {
    return self.fakeChannel.makeFakeStreamingResponse(path: "/sensory.api.v1.video.VideoRecognition/ValidateLiveness", requestHandler: requestHandler)
  }

  public func enqueueValidateLivenessResponses(
    _ responses: [Sensory_Api_V1_Video_LivenessRecognitionResponse],
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Video_ValidateRecognitionRequest>) -> () = { _ in }
  )  {
    let stream = self.makeValidateLivenessResponseStream(requestHandler)
    // These are the only operation on the stream; try! is fine.
    responses.forEach { try! stream.sendMessage($0) }
    try! stream.sendEnd()
  }

  /// Returns true if there are response streams enqueued for 'ValidateLiveness'
  public var hasValidateLivenessResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sensory.api.v1.video.VideoRecognition/ValidateLiveness")
  }
}

