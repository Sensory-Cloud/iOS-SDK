//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: v1/management/enrollment.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service to manage Enrollments in the database
///
/// Usage: instantiate `Sensory_Api_V1_Management_EnrollmentServiceClient`, then call methods of this protocol to make API calls.
public protocol Sensory_Api_V1_Management_EnrollmentServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol? { get }

  func getEnrollments(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentsResponse>

  func getEnrollmentGroups(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentGroupsResponse>

  func createEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_CreateEnrollmentGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>

  func appendEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_AppendEnrollmentGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>

  func deleteEnrollment(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_DeleteEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse>

  func deleteEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>

  func updateEnrollment(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_UpdateEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse>

  func updateEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>

  func removeEnrollmentsFromGroup(
    _ request: Sensory_Api_V1_Management_RemoveEnrollmentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_RemoveEnrollmentsRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>
}

extension Sensory_Api_V1_Management_EnrollmentServiceClientProtocol {
  public var serviceName: String {
    return "sensory.api.v1.management.EnrollmentService"
  }

  /// Get enrollments from the database that match the specified criteria
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEnrollments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getEnrollments(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentsResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEnrollmentsInterceptors() ?? []
    )
  }

  /// Get all enrollment groups that match the specified criteria
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEnrollmentGroups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getEnrollmentGroups(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentGroupsResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollmentGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEnrollmentGroupsInterceptors() ?? []
    )
  }

  /// Creates a new enrollment group without any associated enrollments
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateEnrollmentGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_CreateEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.createEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEnrollmentGroupInterceptors() ?? []
    )
  }

  /// Appends an enrollment to an enrollment group
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to AppendEnrollmentGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func appendEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_AppendEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.appendEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppendEnrollmentGroupInterceptors() ?? []
    )
  }

  /// Deletes an enrollment from the database
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  /// A user may not delete their last enrollment, as this would lead to a situation where a user could
  /// lock themselves out of the system forever.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteEnrollment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteEnrollment(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_DeleteEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteEnrollmentInterceptors() ?? []
    )
  }

  /// Deletes an enrollment group from the database
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteEnrollmentGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteEnrollmentGroupInterceptors() ?? []
    )
  }

  /// Updates the name of an enrollment
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateEnrollment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateEnrollment(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_UpdateEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrollmentInterceptors() ?? []
    )
  }

  /// Updates the name of an enrollment group
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateEnrollmentGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrollmentGroupInterceptors() ?? []
    )
  }

  /// Removes a list of enrollments from an enrollment group
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveEnrollmentsFromGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func removeEnrollmentsFromGroup(
    _ request: Sensory_Api_V1_Management_RemoveEnrollmentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_RemoveEnrollmentsRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.removeEnrollmentsFromGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveEnrollmentsFromGroupInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Sensory_Api_V1_Management_EnrollmentServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Sensory_Api_V1_Management_EnrollmentServiceNIOClient")
public final class Sensory_Api_V1_Management_EnrollmentServiceClient: Sensory_Api_V1_Management_EnrollmentServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the sensory.api.v1.management.EnrollmentService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Sensory_Api_V1_Management_EnrollmentServiceNIOClient: Sensory_Api_V1_Management_EnrollmentServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sensory.api.v1.management.EnrollmentService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Service to manage Enrollments in the database
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Sensory_Api_V1_Management_EnrollmentServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol? { get }

  func makeGetEnrollmentsCall(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentsResponse>

  func makeGetEnrollmentGroupsCall(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentGroupsResponse>

  func makeCreateEnrollmentGroupCall(
    _ request: Sensory_Api_V1_Management_CreateEnrollmentGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>

  func makeAppendEnrollmentGroupCall(
    _ request: Sensory_Api_V1_Management_AppendEnrollmentGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>

  func makeDeleteEnrollmentCall(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_DeleteEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse>

  func makeDeleteEnrollmentGroupCall(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>

  func makeUpdateEnrollmentCall(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_UpdateEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse>

  func makeUpdateEnrollmentGroupCall(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>

  func makeRemoveEnrollmentsFromGroupCall(
    _ request: Sensory_Api_V1_Management_RemoveEnrollmentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_RemoveEnrollmentsRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sensory_Api_V1_Management_EnrollmentServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetEnrollmentsCall(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentsResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEnrollmentsInterceptors() ?? []
    )
  }

  public func makeGetEnrollmentGroupsCall(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentGroupsResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollmentGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEnrollmentGroupsInterceptors() ?? []
    )
  }

  public func makeCreateEnrollmentGroupCall(
    _ request: Sensory_Api_V1_Management_CreateEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.createEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEnrollmentGroupInterceptors() ?? []
    )
  }

  public func makeAppendEnrollmentGroupCall(
    _ request: Sensory_Api_V1_Management_AppendEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.appendEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppendEnrollmentGroupInterceptors() ?? []
    )
  }

  public func makeDeleteEnrollmentCall(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_DeleteEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteEnrollmentInterceptors() ?? []
    )
  }

  public func makeDeleteEnrollmentGroupCall(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteEnrollmentGroupInterceptors() ?? []
    )
  }

  public func makeUpdateEnrollmentCall(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_UpdateEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrollmentInterceptors() ?? []
    )
  }

  public func makeUpdateEnrollmentGroupCall(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrollmentGroupInterceptors() ?? []
    )
  }

  public func makeRemoveEnrollmentsFromGroupCall(
    _ request: Sensory_Api_V1_Management_RemoveEnrollmentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_V1_Management_RemoveEnrollmentsRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.removeEnrollmentsFromGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveEnrollmentsFromGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sensory_Api_V1_Management_EnrollmentServiceAsyncClientProtocol {
  public func getEnrollments(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_V1_Management_GetEnrollmentsResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEnrollmentsInterceptors() ?? []
    )
  }

  public func getEnrollmentGroups(
    _ request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_V1_Management_GetEnrollmentGroupsResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollmentGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEnrollmentGroupsInterceptors() ?? []
    )
  }

  public func createEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_CreateEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.createEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEnrollmentGroupInterceptors() ?? []
    )
  }

  public func appendEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_AppendEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.appendEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppendEnrollmentGroupInterceptors() ?? []
    )
  }

  public func deleteEnrollment(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_V1_Management_EnrollmentResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteEnrollmentInterceptors() ?? []
    )
  }

  public func deleteEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteEnrollmentGroupInterceptors() ?? []
    )
  }

  public func updateEnrollment(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_V1_Management_EnrollmentResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrollmentInterceptors() ?? []
    )
  }

  public func updateEnrollmentGroup(
    _ request: Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollmentGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrollmentGroupInterceptors() ?? []
    )
  }

  public func removeEnrollmentsFromGroup(
    _ request: Sensory_Api_V1_Management_RemoveEnrollmentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.removeEnrollmentsFromGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveEnrollmentsFromGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Sensory_Api_V1_Management_EnrollmentServiceAsyncClient: Sensory_Api_V1_Management_EnrollmentServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getEnrollments'.
  func makeGetEnrollmentsInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentsResponse>]

  /// - Returns: Interceptors to use when invoking 'getEnrollmentGroups'.
  func makeGetEnrollmentGroupsInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentGroupsResponse>]

  /// - Returns: Interceptors to use when invoking 'createEnrollmentGroup'.
  func makeCreateEnrollmentGroupInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'appendEnrollmentGroup'.
  func makeAppendEnrollmentGroupInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteEnrollment'.
  func makeDeleteEnrollmentInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_DeleteEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteEnrollmentGroup'.
  func makeDeleteEnrollmentGroupInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'updateEnrollment'.
  func makeUpdateEnrollmentInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_UpdateEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse>]

  /// - Returns: Interceptors to use when invoking 'updateEnrollmentGroup'.
  func makeUpdateEnrollmentGroupInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'removeEnrollmentsFromGroup'.
  func makeRemoveEnrollmentsFromGroupInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_RemoveEnrollmentsRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]
}

public enum Sensory_Api_V1_Management_EnrollmentServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "EnrollmentService",
    fullName: "sensory.api.v1.management.EnrollmentService",
    methods: [
      Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollments,
      Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollmentGroups,
      Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.createEnrollmentGroup,
      Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.appendEnrollmentGroup,
      Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollment,
      Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollmentGroup,
      Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollment,
      Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollmentGroup,
      Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.removeEnrollmentsFromGroup,
    ]
  )

  public enum Methods {
    public static let getEnrollments = GRPCMethodDescriptor(
      name: "GetEnrollments",
      path: "/sensory.api.v1.management.EnrollmentService/GetEnrollments",
      type: GRPCCallType.unary
    )

    public static let getEnrollmentGroups = GRPCMethodDescriptor(
      name: "GetEnrollmentGroups",
      path: "/sensory.api.v1.management.EnrollmentService/GetEnrollmentGroups",
      type: GRPCCallType.unary
    )

    public static let createEnrollmentGroup = GRPCMethodDescriptor(
      name: "CreateEnrollmentGroup",
      path: "/sensory.api.v1.management.EnrollmentService/CreateEnrollmentGroup",
      type: GRPCCallType.unary
    )

    public static let appendEnrollmentGroup = GRPCMethodDescriptor(
      name: "AppendEnrollmentGroup",
      path: "/sensory.api.v1.management.EnrollmentService/AppendEnrollmentGroup",
      type: GRPCCallType.unary
    )

    public static let deleteEnrollment = GRPCMethodDescriptor(
      name: "DeleteEnrollment",
      path: "/sensory.api.v1.management.EnrollmentService/DeleteEnrollment",
      type: GRPCCallType.unary
    )

    public static let deleteEnrollmentGroup = GRPCMethodDescriptor(
      name: "DeleteEnrollmentGroup",
      path: "/sensory.api.v1.management.EnrollmentService/DeleteEnrollmentGroup",
      type: GRPCCallType.unary
    )

    public static let updateEnrollment = GRPCMethodDescriptor(
      name: "UpdateEnrollment",
      path: "/sensory.api.v1.management.EnrollmentService/UpdateEnrollment",
      type: GRPCCallType.unary
    )

    public static let updateEnrollmentGroup = GRPCMethodDescriptor(
      name: "UpdateEnrollmentGroup",
      path: "/sensory.api.v1.management.EnrollmentService/UpdateEnrollmentGroup",
      type: GRPCCallType.unary
    )

    public static let removeEnrollmentsFromGroup = GRPCMethodDescriptor(
      name: "RemoveEnrollmentsFromGroup",
      path: "/sensory.api.v1.management.EnrollmentService/RemoveEnrollmentsFromGroup",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Sensory_Api_V1_Management_EnrollmentServiceTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Sensory_Api_V1_Management_EnrollmentServiceTestClient: Sensory_Api_V1_Management_EnrollmentServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Management_EnrollmentServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the GetEnrollments RPC. This must be called
  /// before calling 'getEnrollments'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGetEnrollmentsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_GetEnrollmentsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollments.path, requestHandler: requestHandler)
  }

  public func enqueueGetEnrollmentsResponse(
    _ response: Sensory_Api_V1_Management_GetEnrollmentsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_GetEnrollmentsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGetEnrollmentsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetEnrollments'
  public var hasGetEnrollmentsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollments.path)
  }

  /// Make a unary response for the GetEnrollmentGroups RPC. This must be called
  /// before calling 'getEnrollmentGroups'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGetEnrollmentGroupsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_GetEnrollmentsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentGroupsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollmentGroups.path, requestHandler: requestHandler)
  }

  public func enqueueGetEnrollmentGroupsResponse(
    _ response: Sensory_Api_V1_Management_GetEnrollmentGroupsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_GetEnrollmentsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeGetEnrollmentGroupsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetEnrollmentGroups'
  public var hasGetEnrollmentGroupsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.getEnrollmentGroups.path)
  }

  /// Make a unary response for the CreateEnrollmentGroup RPC. This must be called
  /// before calling 'createEnrollmentGroup'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCreateEnrollmentGroupResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.createEnrollmentGroup.path, requestHandler: requestHandler)
  }

  public func enqueueCreateEnrollmentGroupResponse(
    _ response: Sensory_Api_V1_Management_EnrollmentGroupResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest>) -> () = { _ in }
  ) {
    let stream = self.makeCreateEnrollmentGroupResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateEnrollmentGroup'
  public var hasCreateEnrollmentGroupResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.createEnrollmentGroup.path)
  }

  /// Make a unary response for the AppendEnrollmentGroup RPC. This must be called
  /// before calling 'appendEnrollmentGroup'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeAppendEnrollmentGroupResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.appendEnrollmentGroup.path, requestHandler: requestHandler)
  }

  public func enqueueAppendEnrollmentGroupResponse(
    _ response: Sensory_Api_V1_Management_EnrollmentGroupResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest>) -> () = { _ in }
  ) {
    let stream = self.makeAppendEnrollmentGroupResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'AppendEnrollmentGroup'
  public var hasAppendEnrollmentGroupResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.appendEnrollmentGroup.path)
  }

  /// Make a unary response for the DeleteEnrollment RPC. This must be called
  /// before calling 'deleteEnrollment'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDeleteEnrollmentResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_DeleteEnrollmentRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_DeleteEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollment.path, requestHandler: requestHandler)
  }

  public func enqueueDeleteEnrollmentResponse(
    _ response: Sensory_Api_V1_Management_EnrollmentResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_DeleteEnrollmentRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDeleteEnrollmentResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeleteEnrollment'
  public var hasDeleteEnrollmentResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollment.path)
  }

  /// Make a unary response for the DeleteEnrollmentGroup RPC. This must be called
  /// before calling 'deleteEnrollmentGroup'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDeleteEnrollmentGroupResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollmentGroup.path, requestHandler: requestHandler)
  }

  public func enqueueDeleteEnrollmentGroupResponse(
    _ response: Sensory_Api_V1_Management_EnrollmentGroupResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest>) -> () = { _ in }
  ) {
    let stream = self.makeDeleteEnrollmentGroupResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeleteEnrollmentGroup'
  public var hasDeleteEnrollmentGroupResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.deleteEnrollmentGroup.path)
  }

  /// Make a unary response for the UpdateEnrollment RPC. This must be called
  /// before calling 'updateEnrollment'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateEnrollmentResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_UpdateEnrollmentRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_UpdateEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollment.path, requestHandler: requestHandler)
  }

  public func enqueueUpdateEnrollmentResponse(
    _ response: Sensory_Api_V1_Management_EnrollmentResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_UpdateEnrollmentRequest>) -> () = { _ in }
  ) {
    let stream = self.makeUpdateEnrollmentResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateEnrollment'
  public var hasUpdateEnrollmentResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollment.path)
  }

  /// Make a unary response for the UpdateEnrollmentGroup RPC. This must be called
  /// before calling 'updateEnrollmentGroup'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateEnrollmentGroupResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollmentGroup.path, requestHandler: requestHandler)
  }

  public func enqueueUpdateEnrollmentGroupResponse(
    _ response: Sensory_Api_V1_Management_EnrollmentGroupResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest>) -> () = { _ in }
  ) {
    let stream = self.makeUpdateEnrollmentGroupResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateEnrollmentGroup'
  public var hasUpdateEnrollmentGroupResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.updateEnrollmentGroup.path)
  }

  /// Make a unary response for the RemoveEnrollmentsFromGroup RPC. This must be called
  /// before calling 'removeEnrollmentsFromGroup'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeRemoveEnrollmentsFromGroupResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_RemoveEnrollmentsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_RemoveEnrollmentsRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.removeEnrollmentsFromGroup.path, requestHandler: requestHandler)
  }

  public func enqueueRemoveEnrollmentsFromGroupResponse(
    _ response: Sensory_Api_V1_Management_EnrollmentGroupResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_RemoveEnrollmentsRequest>) -> () = { _ in }
  ) {
    let stream = self.makeRemoveEnrollmentsFromGroupResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'RemoveEnrollmentsFromGroup'
  public var hasRemoveEnrollmentsFromGroupResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Management_EnrollmentServiceClientMetadata.Methods.removeEnrollmentsFromGroup.path)
  }
}

/// Service to manage Enrollments in the database
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Sensory_Api_V1_Management_EnrollmentServiceProvider: CallHandlerProvider {
  var interceptors: Sensory_Api_V1_Management_EnrollmentServiceServerInterceptorFactoryProtocol? { get }

  /// Get enrollments from the database that match the specified criteria
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  func getEnrollments(request: Sensory_Api_V1_Management_GetEnrollmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_V1_Management_GetEnrollmentsResponse>

  /// Get all enrollment groups that match the specified criteria
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  func getEnrollmentGroups(request: Sensory_Api_V1_Management_GetEnrollmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_V1_Management_GetEnrollmentGroupsResponse>

  /// Creates a new enrollment group without any associated enrollments
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  func createEnrollmentGroup(request: Sensory_Api_V1_Management_CreateEnrollmentGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_V1_Management_EnrollmentGroupResponse>

  /// Appends an enrollment to an enrollment group
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  func appendEnrollmentGroup(request: Sensory_Api_V1_Management_AppendEnrollmentGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_V1_Management_EnrollmentGroupResponse>

  /// Deletes an enrollment from the database
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  /// A user may not delete their last enrollment, as this would lead to a situation where a user could
  /// lock themselves out of the system forever.
  func deleteEnrollment(request: Sensory_Api_V1_Management_DeleteEnrollmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_V1_Management_EnrollmentResponse>

  /// Deletes an enrollment group from the database
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  func deleteEnrollmentGroup(request: Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_V1_Management_EnrollmentGroupResponse>

  /// Updates the name of an enrollment
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  func updateEnrollment(request: Sensory_Api_V1_Management_UpdateEnrollmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_V1_Management_EnrollmentResponse>

  /// Updates the name of an enrollment group
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  func updateEnrollmentGroup(request: Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_V1_Management_EnrollmentGroupResponse>

  /// Removes a list of enrollments from an enrollment group
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  func removeEnrollmentsFromGroup(request: Sensory_Api_V1_Management_RemoveEnrollmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_V1_Management_EnrollmentGroupResponse>
}

extension Sensory_Api_V1_Management_EnrollmentServiceProvider {
  public var serviceName: Substring {
    return Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetEnrollments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_GetEnrollmentsRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_GetEnrollmentsResponse>(),
        interceptors: self.interceptors?.makeGetEnrollmentsInterceptors() ?? [],
        userFunction: self.getEnrollments(request:context:)
      )

    case "GetEnrollmentGroups":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_GetEnrollmentsRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_GetEnrollmentGroupsResponse>(),
        interceptors: self.interceptors?.makeGetEnrollmentGroupsInterceptors() ?? [],
        userFunction: self.getEnrollmentGroups(request:context:)
      )

    case "CreateEnrollmentGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeCreateEnrollmentGroupInterceptors() ?? [],
        userFunction: self.createEnrollmentGroup(request:context:)
      )

    case "AppendEnrollmentGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeAppendEnrollmentGroupInterceptors() ?? [],
        userFunction: self.appendEnrollmentGroup(request:context:)
      )

    case "DeleteEnrollment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_DeleteEnrollmentRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentResponse>(),
        interceptors: self.interceptors?.makeDeleteEnrollmentInterceptors() ?? [],
        userFunction: self.deleteEnrollment(request:context:)
      )

    case "DeleteEnrollmentGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeDeleteEnrollmentGroupInterceptors() ?? [],
        userFunction: self.deleteEnrollmentGroup(request:context:)
      )

    case "UpdateEnrollment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_UpdateEnrollmentRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentResponse>(),
        interceptors: self.interceptors?.makeUpdateEnrollmentInterceptors() ?? [],
        userFunction: self.updateEnrollment(request:context:)
      )

    case "UpdateEnrollmentGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeUpdateEnrollmentGroupInterceptors() ?? [],
        userFunction: self.updateEnrollmentGroup(request:context:)
      )

    case "RemoveEnrollmentsFromGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_RemoveEnrollmentsRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeRemoveEnrollmentsFromGroupInterceptors() ?? [],
        userFunction: self.removeEnrollmentsFromGroup(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Service to manage Enrollments in the database
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Sensory_Api_V1_Management_EnrollmentServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sensory_Api_V1_Management_EnrollmentServiceServerInterceptorFactoryProtocol? { get }

  /// Get enrollments from the database that match the specified criteria
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  @Sendable func getEnrollments(
    request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_V1_Management_GetEnrollmentsResponse

  /// Get all enrollment groups that match the specified criteria
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  @Sendable func getEnrollmentGroups(
    request: Sensory_Api_V1_Management_GetEnrollmentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_V1_Management_GetEnrollmentGroupsResponse

  /// Creates a new enrollment group without any associated enrollments
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  @Sendable func createEnrollmentGroup(
    request: Sensory_Api_V1_Management_CreateEnrollmentGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse

  /// Appends an enrollment to an enrollment group
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  @Sendable func appendEnrollmentGroup(
    request: Sensory_Api_V1_Management_AppendEnrollmentGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse

  /// Deletes an enrollment from the database
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  /// A user may not delete their last enrollment, as this would lead to a situation where a user could
  /// lock themselves out of the system forever.
  @Sendable func deleteEnrollment(
    request: Sensory_Api_V1_Management_DeleteEnrollmentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_V1_Management_EnrollmentResponse

  /// Deletes an enrollment group from the database
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  @Sendable func deleteEnrollmentGroup(
    request: Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse

  /// Updates the name of an enrollment
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  @Sendable func updateEnrollment(
    request: Sensory_Api_V1_Management_UpdateEnrollmentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_V1_Management_EnrollmentResponse

  /// Updates the name of an enrollment group
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  @Sendable func updateEnrollmentGroup(
    request: Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse

  /// Removes a list of enrollments from an enrollment group
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  @Sendable func removeEnrollmentsFromGroup(
    request: Sensory_Api_V1_Management_RemoveEnrollmentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_V1_Management_EnrollmentGroupResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sensory_Api_V1_Management_EnrollmentServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Sensory_Api_V1_Management_EnrollmentServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetEnrollments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_GetEnrollmentsRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_GetEnrollmentsResponse>(),
        interceptors: self.interceptors?.makeGetEnrollmentsInterceptors() ?? [],
        wrapping: self.getEnrollments(request:context:)
      )

    case "GetEnrollmentGroups":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_GetEnrollmentsRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_GetEnrollmentGroupsResponse>(),
        interceptors: self.interceptors?.makeGetEnrollmentGroupsInterceptors() ?? [],
        wrapping: self.getEnrollmentGroups(request:context:)
      )

    case "CreateEnrollmentGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeCreateEnrollmentGroupInterceptors() ?? [],
        wrapping: self.createEnrollmentGroup(request:context:)
      )

    case "AppendEnrollmentGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeAppendEnrollmentGroupInterceptors() ?? [],
        wrapping: self.appendEnrollmentGroup(request:context:)
      )

    case "DeleteEnrollment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_DeleteEnrollmentRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentResponse>(),
        interceptors: self.interceptors?.makeDeleteEnrollmentInterceptors() ?? [],
        wrapping: self.deleteEnrollment(request:context:)
      )

    case "DeleteEnrollmentGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeDeleteEnrollmentGroupInterceptors() ?? [],
        wrapping: self.deleteEnrollmentGroup(request:context:)
      )

    case "UpdateEnrollment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_UpdateEnrollmentRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentResponse>(),
        interceptors: self.interceptors?.makeUpdateEnrollmentInterceptors() ?? [],
        wrapping: self.updateEnrollment(request:context:)
      )

    case "UpdateEnrollmentGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeUpdateEnrollmentGroupInterceptors() ?? [],
        wrapping: self.updateEnrollmentGroup(request:context:)
      )

    case "RemoveEnrollmentsFromGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_V1_Management_RemoveEnrollmentsRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_V1_Management_EnrollmentGroupResponse>(),
        interceptors: self.interceptors?.makeRemoveEnrollmentsFromGroupInterceptors() ?? [],
        wrapping: self.removeEnrollmentsFromGroup(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Sensory_Api_V1_Management_EnrollmentServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getEnrollments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEnrollmentsInterceptors() -> [ServerInterceptor<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentsResponse>]

  /// - Returns: Interceptors to use when handling 'getEnrollmentGroups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEnrollmentGroupsInterceptors() -> [ServerInterceptor<Sensory_Api_V1_Management_GetEnrollmentsRequest, Sensory_Api_V1_Management_GetEnrollmentGroupsResponse>]

  /// - Returns: Interceptors to use when handling 'createEnrollmentGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateEnrollmentGroupInterceptors() -> [ServerInterceptor<Sensory_Api_V1_Management_CreateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]

  /// - Returns: Interceptors to use when handling 'appendEnrollmentGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAppendEnrollmentGroupInterceptors() -> [ServerInterceptor<Sensory_Api_V1_Management_AppendEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]

  /// - Returns: Interceptors to use when handling 'deleteEnrollment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteEnrollmentInterceptors() -> [ServerInterceptor<Sensory_Api_V1_Management_DeleteEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse>]

  /// - Returns: Interceptors to use when handling 'deleteEnrollmentGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteEnrollmentGroupInterceptors() -> [ServerInterceptor<Sensory_Api_V1_Management_DeleteEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]

  /// - Returns: Interceptors to use when handling 'updateEnrollment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateEnrollmentInterceptors() -> [ServerInterceptor<Sensory_Api_V1_Management_UpdateEnrollmentRequest, Sensory_Api_V1_Management_EnrollmentResponse>]

  /// - Returns: Interceptors to use when handling 'updateEnrollmentGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateEnrollmentGroupInterceptors() -> [ServerInterceptor<Sensory_Api_V1_Management_UpdateEnrollmentGroupRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]

  /// - Returns: Interceptors to use when handling 'removeEnrollmentsFromGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveEnrollmentsFromGroupInterceptors() -> [ServerInterceptor<Sensory_Api_V1_Management_RemoveEnrollmentsRequest, Sensory_Api_V1_Management_EnrollmentGroupResponse>]
}

public enum Sensory_Api_V1_Management_EnrollmentServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "EnrollmentService",
    fullName: "sensory.api.v1.management.EnrollmentService",
    methods: [
      Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.Methods.getEnrollments,
      Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.Methods.getEnrollmentGroups,
      Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.Methods.createEnrollmentGroup,
      Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.Methods.appendEnrollmentGroup,
      Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.Methods.deleteEnrollment,
      Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.Methods.deleteEnrollmentGroup,
      Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.Methods.updateEnrollment,
      Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.Methods.updateEnrollmentGroup,
      Sensory_Api_V1_Management_EnrollmentServiceServerMetadata.Methods.removeEnrollmentsFromGroup,
    ]
  )

  public enum Methods {
    public static let getEnrollments = GRPCMethodDescriptor(
      name: "GetEnrollments",
      path: "/sensory.api.v1.management.EnrollmentService/GetEnrollments",
      type: GRPCCallType.unary
    )

    public static let getEnrollmentGroups = GRPCMethodDescriptor(
      name: "GetEnrollmentGroups",
      path: "/sensory.api.v1.management.EnrollmentService/GetEnrollmentGroups",
      type: GRPCCallType.unary
    )

    public static let createEnrollmentGroup = GRPCMethodDescriptor(
      name: "CreateEnrollmentGroup",
      path: "/sensory.api.v1.management.EnrollmentService/CreateEnrollmentGroup",
      type: GRPCCallType.unary
    )

    public static let appendEnrollmentGroup = GRPCMethodDescriptor(
      name: "AppendEnrollmentGroup",
      path: "/sensory.api.v1.management.EnrollmentService/AppendEnrollmentGroup",
      type: GRPCCallType.unary
    )

    public static let deleteEnrollment = GRPCMethodDescriptor(
      name: "DeleteEnrollment",
      path: "/sensory.api.v1.management.EnrollmentService/DeleteEnrollment",
      type: GRPCCallType.unary
    )

    public static let deleteEnrollmentGroup = GRPCMethodDescriptor(
      name: "DeleteEnrollmentGroup",
      path: "/sensory.api.v1.management.EnrollmentService/DeleteEnrollmentGroup",
      type: GRPCCallType.unary
    )

    public static let updateEnrollment = GRPCMethodDescriptor(
      name: "UpdateEnrollment",
      path: "/sensory.api.v1.management.EnrollmentService/UpdateEnrollment",
      type: GRPCCallType.unary
    )

    public static let updateEnrollmentGroup = GRPCMethodDescriptor(
      name: "UpdateEnrollmentGroup",
      path: "/sensory.api.v1.management.EnrollmentService/UpdateEnrollmentGroup",
      type: GRPCCallType.unary
    )

    public static let removeEnrollmentsFromGroup = GRPCMethodDescriptor(
      name: "RemoveEnrollmentsFromGroup",
      path: "/sensory.api.v1.management.EnrollmentService/RemoveEnrollmentsFromGroup",
      type: GRPCCallType.unary
    )
  }
}
