//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: v1/management/configuration.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Serivce to manage tenant configuration, such as available models and license
///
/// Usage: instantiate `Sensory_Api_V1_Management_ConfigurationServiceClient`, then call methods of this protocol to make API calls.
public protocol Sensory_Api_V1_Management_ConfigurationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sensory_Api_V1_Management_ConfigurationServiceClientInterceptorFactoryProtocol? { get }

  func getFileConfiguration(
    _ request: Sensory_Api_V1_Management_FileConfigurationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_FileConfigurationRequest, Sensory_Api_V1_Management_FileConfigurationResponse>

  func upsertFileConfiguration(
    _ request: Sensory_Api_V1_Management_UpsertFileConfigurationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_V1_Management_UpsertFileConfigurationRequest, Sensory_Api_V1_Management_FileConfigurationResponse>
}

extension Sensory_Api_V1_Management_ConfigurationServiceClientProtocol {
  public var serviceName: String {
    return "sensory.api.v1.management.ConfigurationService"
  }

  /// Get file configuration for a tenant
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFileConfiguration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFileConfiguration(
    _ request: Sensory_Api_V1_Management_FileConfigurationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_FileConfigurationRequest, Sensory_Api_V1_Management_FileConfigurationResponse> {
    return self.makeUnaryCall(
      path: "/sensory.api.v1.management.ConfigurationService/GetFileConfiguration",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFileConfigurationInterceptors() ?? []
    )
  }

  /// Upsert file configuration for a tenant
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// - Parameters:
  ///   - request: Request to send to UpsertFileConfiguration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func upsertFileConfiguration(
    _ request: Sensory_Api_V1_Management_UpsertFileConfigurationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_V1_Management_UpsertFileConfigurationRequest, Sensory_Api_V1_Management_FileConfigurationResponse> {
    return self.makeUnaryCall(
      path: "/sensory.api.v1.management.ConfigurationService/UpsertFileConfiguration",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertFileConfigurationInterceptors() ?? []
    )
  }
}

public protocol Sensory_Api_V1_Management_ConfigurationServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getFileConfiguration'.
  func makeGetFileConfigurationInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_FileConfigurationRequest, Sensory_Api_V1_Management_FileConfigurationResponse>]

  /// - Returns: Interceptors to use when invoking 'upsertFileConfiguration'.
  func makeUpsertFileConfigurationInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Management_UpsertFileConfigurationRequest, Sensory_Api_V1_Management_FileConfigurationResponse>]
}

public final class Sensory_Api_V1_Management_ConfigurationServiceClient: Sensory_Api_V1_Management_ConfigurationServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Management_ConfigurationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sensory.api.v1.management.ConfigurationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Management_ConfigurationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public final class Sensory_Api_V1_Management_ConfigurationServiceTestClient: Sensory_Api_V1_Management_ConfigurationServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Management_ConfigurationServiceClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Management_ConfigurationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the GetFileConfiguration RPC. This must be called
  /// before calling 'getFileConfiguration'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGetFileConfigurationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_FileConfigurationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_FileConfigurationRequest, Sensory_Api_V1_Management_FileConfigurationResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sensory.api.v1.management.ConfigurationService/GetFileConfiguration", requestHandler: requestHandler)
  }

  public func enqueueGetFileConfigurationResponse(
    _ response: Sensory_Api_V1_Management_FileConfigurationResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_FileConfigurationRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetFileConfigurationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetFileConfiguration'
  public var hasGetFileConfigurationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sensory.api.v1.management.ConfigurationService/GetFileConfiguration")
  }

  /// Make a unary response for the UpsertFileConfiguration RPC. This must be called
  /// before calling 'upsertFileConfiguration'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpsertFileConfigurationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_UpsertFileConfigurationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sensory_Api_V1_Management_UpsertFileConfigurationRequest, Sensory_Api_V1_Management_FileConfigurationResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sensory.api.v1.management.ConfigurationService/UpsertFileConfiguration", requestHandler: requestHandler)
  }

  public func enqueueUpsertFileConfigurationResponse(
    _ response: Sensory_Api_V1_Management_FileConfigurationResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Management_UpsertFileConfigurationRequest>) -> () = { _ in }
  )  {
    let stream = self.makeUpsertFileConfigurationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpsertFileConfiguration'
  public var hasUpsertFileConfigurationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sensory.api.v1.management.ConfigurationService/UpsertFileConfiguration")
  }
}

