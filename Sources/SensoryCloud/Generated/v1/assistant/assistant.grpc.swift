//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: v1/assistant/assistant.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Serivce to comunicate with an assistant
///
/// Usage: instantiate `Sensory_Api_V1_Assistant_AssistantServiceClient`, then call methods of this protocol to make API calls.
public protocol Sensory_Api_V1_Assistant_AssistantServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol? { get }

  func processMessage(
    callOptions: CallOptions?,
    handler: @escaping (Sensory_Api_V1_Assistant_AssistantMessageResponse) -> Void
  ) -> BidirectionalStreamingCall<Sensory_Api_V1_Assistant_AssistantMessageRequest, Sensory_Api_V1_Assistant_AssistantMessageResponse>
}

extension Sensory_Api_V1_Assistant_AssistantServiceClientProtocol {
  public var serviceName: String {
    return "sensory.api.v1.assistant.AssistantService"
  }

  /// Sends and process messages from a virtual assistant
  /// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func processMessage(
    callOptions: CallOptions? = nil,
    handler: @escaping (Sensory_Api_V1_Assistant_AssistantMessageResponse) -> Void
  ) -> BidirectionalStreamingCall<Sensory_Api_V1_Assistant_AssistantMessageRequest, Sensory_Api_V1_Assistant_AssistantMessageResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Sensory_Api_V1_Assistant_AssistantServiceClientMetadata.Methods.processMessage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessMessageInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Sensory_Api_V1_Assistant_AssistantServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Sensory_Api_V1_Assistant_AssistantServiceNIOClient")
public final class Sensory_Api_V1_Assistant_AssistantServiceClient: Sensory_Api_V1_Assistant_AssistantServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the sensory.api.v1.assistant.AssistantService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Sensory_Api_V1_Assistant_AssistantServiceNIOClient: Sensory_Api_V1_Assistant_AssistantServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sensory.api.v1.assistant.AssistantService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Serivce to comunicate with an assistant
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Sensory_Api_V1_Assistant_AssistantServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol? { get }

  func makeProcessMessageCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Sensory_Api_V1_Assistant_AssistantMessageRequest, Sensory_Api_V1_Assistant_AssistantMessageResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sensory_Api_V1_Assistant_AssistantServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Sensory_Api_V1_Assistant_AssistantServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeProcessMessageCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Sensory_Api_V1_Assistant_AssistantMessageRequest, Sensory_Api_V1_Assistant_AssistantMessageResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Sensory_Api_V1_Assistant_AssistantServiceClientMetadata.Methods.processMessage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sensory_Api_V1_Assistant_AssistantServiceAsyncClientProtocol {
  public func processMessage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Sensory_Api_V1_Assistant_AssistantMessageResponse> where RequestStream: Sequence, RequestStream.Element == Sensory_Api_V1_Assistant_AssistantMessageRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Sensory_Api_V1_Assistant_AssistantServiceClientMetadata.Methods.processMessage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessMessageInterceptors() ?? []
    )
  }

  public func processMessage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Sensory_Api_V1_Assistant_AssistantMessageResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Sensory_Api_V1_Assistant_AssistantMessageRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Sensory_Api_V1_Assistant_AssistantServiceClientMetadata.Methods.processMessage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Sensory_Api_V1_Assistant_AssistantServiceAsyncClient: Sensory_Api_V1_Assistant_AssistantServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'processMessage'.
  func makeProcessMessageInterceptors() -> [ClientInterceptor<Sensory_Api_V1_Assistant_AssistantMessageRequest, Sensory_Api_V1_Assistant_AssistantMessageResponse>]
}

public enum Sensory_Api_V1_Assistant_AssistantServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AssistantService",
    fullName: "sensory.api.v1.assistant.AssistantService",
    methods: [
      Sensory_Api_V1_Assistant_AssistantServiceClientMetadata.Methods.processMessage,
    ]
  )

  public enum Methods {
    public static let processMessage = GRPCMethodDescriptor(
      name: "ProcessMessage",
      path: "/sensory.api.v1.assistant.AssistantService/ProcessMessage",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension Sensory_Api_V1_Assistant_AssistantServiceTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class Sensory_Api_V1_Assistant_AssistantServiceTestClient: Sensory_Api_V1_Assistant_AssistantServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_V1_Assistant_AssistantServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a streaming response for the ProcessMessage RPC. This must be called
  /// before calling 'processMessage'. See also 'FakeStreamingResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeProcessMessageResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Assistant_AssistantMessageRequest>) -> () = { _ in }
  ) -> FakeStreamingResponse<Sensory_Api_V1_Assistant_AssistantMessageRequest, Sensory_Api_V1_Assistant_AssistantMessageResponse> {
    return self.fakeChannel.makeFakeStreamingResponse(path: Sensory_Api_V1_Assistant_AssistantServiceClientMetadata.Methods.processMessage.path, requestHandler: requestHandler)
  }

  public func enqueueProcessMessageResponses(
    _ responses: [Sensory_Api_V1_Assistant_AssistantMessageResponse],
    _ requestHandler: @escaping (FakeRequestPart<Sensory_Api_V1_Assistant_AssistantMessageRequest>) -> () = { _ in }
  ) {
    let stream = self.makeProcessMessageResponseStream(requestHandler)
    // These are the only operation on the stream; try! is fine.
    responses.forEach { try! stream.sendMessage($0) }
    try! stream.sendEnd()
  }

  /// Returns true if there are response streams enqueued for 'ProcessMessage'
  public var hasProcessMessageResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: Sensory_Api_V1_Assistant_AssistantServiceClientMetadata.Methods.processMessage.path)
  }
}

