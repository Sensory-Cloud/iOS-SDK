//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: health/health.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service for Health function
///
/// Usage: instantiate `Sensory_Api_Health_HealthServiceClient`, then call methods of this protocol to make API calls.
public protocol Sensory_Api_Health_HealthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol? { get }

  func getHealth(
    _ request: Sensory_Api_Health_HealthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sensory_Api_Health_HealthRequest, Sensory_Api_Common_ServerHealthResponse>
}

extension Sensory_Api_Health_HealthServiceClientProtocol {
  public var serviceName: String {
    return "sensory.api.health.HealthService"
  }

  /// Obtain an Health and Server status information
  ///
  /// - Parameters:
  ///   - request: Request to send to GetHealth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getHealth(
    _ request: Sensory_Api_Health_HealthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sensory_Api_Health_HealthRequest, Sensory_Api_Common_ServerHealthResponse> {
    return self.makeUnaryCall(
      path: Sensory_Api_Health_HealthServiceClientMetadata.Methods.getHealth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetHealthInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Sensory_Api_Health_HealthServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Sensory_Api_Health_HealthServiceNIOClient")
public final class Sensory_Api_Health_HealthServiceClient: Sensory_Api_Health_HealthServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the sensory.api.health.HealthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Sensory_Api_Health_HealthServiceNIOClient: Sensory_Api_Health_HealthServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sensory.api.health.HealthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Service for Health function
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Sensory_Api_Health_HealthServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol? { get }

  func makeGetHealthCall(
    _ request: Sensory_Api_Health_HealthRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sensory_Api_Health_HealthRequest, Sensory_Api_Common_ServerHealthResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sensory_Api_Health_HealthServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Sensory_Api_Health_HealthServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetHealthCall(
    _ request: Sensory_Api_Health_HealthRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sensory_Api_Health_HealthRequest, Sensory_Api_Common_ServerHealthResponse> {
    return self.makeAsyncUnaryCall(
      path: Sensory_Api_Health_HealthServiceClientMetadata.Methods.getHealth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetHealthInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sensory_Api_Health_HealthServiceAsyncClientProtocol {
  public func getHealth(
    _ request: Sensory_Api_Health_HealthRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sensory_Api_Common_ServerHealthResponse {
    return try await self.performAsyncUnaryCall(
      path: Sensory_Api_Health_HealthServiceClientMetadata.Methods.getHealth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetHealthInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Sensory_Api_Health_HealthServiceAsyncClient: Sensory_Api_Health_HealthServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Sensory_Api_Health_HealthServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getHealth'.
  func makeGetHealthInterceptors() -> [ClientInterceptor<Sensory_Api_Health_HealthRequest, Sensory_Api_Common_ServerHealthResponse>]
}

public enum Sensory_Api_Health_HealthServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "HealthService",
    fullName: "sensory.api.health.HealthService",
    methods: [
      Sensory_Api_Health_HealthServiceClientMetadata.Methods.getHealth,
    ]
  )

  public enum Methods {
    public static let getHealth = GRPCMethodDescriptor(
      name: "GetHealth",
      path: "/sensory.api.health.HealthService/GetHealth",
      type: GRPCCallType.unary
    )
  }
}

/// Service for Health function
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Sensory_Api_Health_HealthServiceProvider: CallHandlerProvider {
  var interceptors: Sensory_Api_Health_HealthServiceServerInterceptorFactoryProtocol? { get }

  /// Obtain an Health and Server status information
  func getHealth(request: Sensory_Api_Health_HealthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sensory_Api_Common_ServerHealthResponse>
}

extension Sensory_Api_Health_HealthServiceProvider {
  public var serviceName: Substring {
    return Sensory_Api_Health_HealthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetHealth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_Health_HealthRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_Common_ServerHealthResponse>(),
        interceptors: self.interceptors?.makeGetHealthInterceptors() ?? [],
        userFunction: self.getHealth(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Service for Health function
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Sensory_Api_Health_HealthServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sensory_Api_Health_HealthServiceServerInterceptorFactoryProtocol? { get }

  /// Obtain an Health and Server status information
  @Sendable func getHealth(
    request: Sensory_Api_Health_HealthRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sensory_Api_Common_ServerHealthResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sensory_Api_Health_HealthServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Sensory_Api_Health_HealthServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Sensory_Api_Health_HealthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Sensory_Api_Health_HealthServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetHealth":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sensory_Api_Health_HealthRequest>(),
        responseSerializer: ProtobufSerializer<Sensory_Api_Common_ServerHealthResponse>(),
        interceptors: self.interceptors?.makeGetHealthInterceptors() ?? [],
        wrapping: self.getHealth(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Sensory_Api_Health_HealthServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getHealth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetHealthInterceptors() -> [ServerInterceptor<Sensory_Api_Health_HealthRequest, Sensory_Api_Common_ServerHealthResponse>]
}

public enum Sensory_Api_Health_HealthServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "HealthService",
    fullName: "sensory.api.health.HealthService",
    methods: [
      Sensory_Api_Health_HealthServiceServerMetadata.Methods.getHealth,
    ]
  )

  public enum Methods {
    public static let getHealth = GRPCMethodDescriptor(
      name: "GetHealth",
      path: "/sensory.api.health.HealthService/GetHealth",
      type: GRPCCallType.unary
    )
  }
}
