//
//  Service.swift
//  Sensory Cloud
//
//  Created by Niles Hacking on 11/4/21.
//

import Foundation
import GRPC
import NIOHPACK

// Shared superclass for all of the grpc clients from the auto-generated code
protocol GrpcClient {
    init(grpcChannel: GRPCChannel)
}

/// Overall Service class which maintains an in memory cache of various network elements and
/// shared logic for creating clients and attaching OAuth tokens to server calls.
public class Service {

    /// Persistence for storing + loading access tokens from
    ///
    /// This variable defaults to a new instance of `TokenManager`. This variable may be set to allow for clients to manage their own OAuth credentials.
    public var credentialProvider: CredentialProvider = TokenManager()

    /// Static event loop group which is shared between all services
    let group = PlatformSupport.makeEventLoopGroup(loopCount: 1)

    /// Cloud host used for the current cached clients
    var cacheHost: CloudHost?

    /// Cached grpc clients used by service subclasses
    var cachedClients: [String: Any] = [:]

    /// Static mapping from client protocol types to the implementing client class
    private let clientTypeDict: [String: GrpcClient.Type] = [
        "\(Sensory_Api_Health_HealthServiceClientProtocol.self)": Sensory_Api_Health_HealthServiceClient.self,
        "\(Sensory_Api_V1_Management_EnrollmentServiceClientProtocol.self)": Sensory_Api_V1_Management_EnrollmentServiceClient.self,
        "\(Sensory_Api_V1_Management_DeviceServiceClientProtocol.self)": Sensory_Api_V1_Management_DeviceServiceClient.self,
        "\(Sensory_Api_V1_Audio_AudioModelsClientProtocol.self)": Sensory_Api_V1_Audio_AudioModelsClient.self,
        "\(Sensory_Api_V1_Audio_AudioBiometricsClientProtocol.self)": Sensory_Api_V1_Audio_AudioBiometricsClient.self,
        "\(Sensory_Api_V1_Audio_AudioEventsClientProtocol.self)": Sensory_Api_V1_Audio_AudioEventsClient.self,
        "\(Sensory_Api_V1_Audio_AudioTranscriptionsClientProtocol.self)":
            Sensory_Api_V1_Audio_AudioTranscriptionsClient.self,
        "\(Sensory_Api_V1_Video_VideoModelsClientProtocol.self)": Sensory_Api_V1_Video_VideoModelsClient.self,
        "\(Sensory_Api_V1_Video_VideoBiometricsClientProtocol.self)": Sensory_Api_V1_Video_VideoBiometricsClient.self,
        "\(Sensory_Api_V1_Video_VideoRecognitionClientProtocol.self)": Sensory_Api_V1_Video_VideoRecognitionClient.self
    ]

    init() {}

    /// Shared service instance, This should only be used for setting a non-default `credentialProvider`
    public static let shared = Service()

    /// Returns a cached grpc client of the specified type, or creates and caches a new one
    ///
    /// This function expects to be passed the `ClientProtocol` class that has been auto-generated by the grpc library and *NOT* the `Client` class
    /// - Throws: Any errors encountered while establishing the client connection
    func getClient<T>() throws -> T {

        // Check if the cache is still valid
        if cacheHost != Config.getCloudHost() || cacheHost == nil {
            cachedClients.removeAll()
            cacheHost = Config.getCloudHost()
        }

        let key = "\(T.self)"

        if let client = cachedClients[key] as? T {
            return client
        }

        let channel = try getGRPCChannel()
        guard let clientType = clientTypeDict[key] else {
            throw NetworkError.invalidClientClass(key)
        }
        let client = clientType.init(grpcChannel: channel)
        cachedClients[key] = client
        guard let clientProtocol = client as? T else {
            throw NetworkError.invalidClientClass(key)
        }
        return clientProtocol
    }

    /// Creates a new grpc channel
    ///
    /// - Throws: NetworkError.notInitialized if a cloud host has not been set, or any error encountered while creating the grpc channel
    func getGRPCChannel() throws -> GRPCChannel {
        guard let host = Config.getCloudHost() else {
            throw NetworkError.notInitialized
        }

        return try GRPCChannelPool.with(
            target: .host(host.host, port: host.port),
            transportSecurity: host.isSecure ? .tls(GRPCTLSConfiguration.makeClientConfigurationBackedByNIOSSL()) : .plaintext,
            eventLoopGroup: group
        )
    }

    /// Creates the default metadata that should be attached to all grpc calls
    ///
    /// - Parameter isUnary: Unary grpc calls have a default timeout which should not be applied to streaming calls
    /// - Throws: Any error encountered while generating an OAuth token
    func getDefaultMetadata(isUnary: Bool = false) throws -> CallOptions {
        let token = try credentialProvider.getAccessToken()
        let headers: HPACKHeaders = ["authorization": "Bearer \(token)"]
        if isUnary {
            return CallOptions(customMetadata: headers, timeLimit: .timeout(.seconds(Config.grpcTimeout)))
        } else {
            return CallOptions(customMetadata: headers)
        }
    }
}
